swagger: '2.0'
info:
  version: 1.0.0
  title: Patient Management System
  description: ''
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
host: 'localhost:3000'
basePath: /api/v1
tags:
  - name: PMS
    description: API for patient management system
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /doctors:
    get:
      tags:
        - Doctors
      summary: Get all doctors in system
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Doctor'
    post:
      tags:
        - Doctors
      description: Create new doctor in system
      parameters:
        - name: Doctor
          in: body
          description: Doctor that we want to create
          schema:
            $ref: '#/definitions/Doctor'
      produces:
        - application/json
      responses:
        '200':
          description: New Doctor is created
          schema:
            $ref: '#/definitions/Doctor'
  /doctors/{id}:
    get:
      tags:
        - Doctors
      summary: Get a doctor
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: id to find the doctor
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: 'Doctor with the id not found'
    put:
      tags:
        - Doctors
      description: Update a doctor in system
      parameters:
        - name: id
          in: path
          description: Doctor id to update
          required: true
          type: string
        - in: body
          name: Doctor
          description: Doctor that we want to update
          schema:
            $ref: '#/definitions/Doctor'
      produces:
        - application/json
      responses:
        '200':
          description: New Doctor is created
        '400':
          description: Bad request
        '404':
          description: Doctor with the id not found
    delete:
      tags:
        - Doctors
      summary: Delete a doctor
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Doctor id to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  
  /patients:
    get:
      tags:
        - Patients
      summary: Get all patients in system
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Patient'
    post:
      tags:
        - Patients
      description: Create new patient in system
      parameters:
        - name: Patients
          in: body
          description: Patient that we want to create
          schema:
            $ref: '#/definitions/Patient'
      produces:
        - application/json
      responses:
        '200':
          description: New Patient is created
          schema:
            $ref: '#/definitions/Patient'
  /patients/{id}:
    get:
      tags:
        - Patients
      summary: Get a Patient
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id to find the patient
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: 'Patient with the id not found'
    put:
      tags:
        - Patients
      description: Update a patient in system
      parameters:
        - name: id
          in: path
          description: Patient id to update
          required: true
          type: string
        - in: body
          name: Patient
          description: Patient that we want to update
          schema:
            $ref: '#/definitions/Patient'
      produces:
        - application/json
      responses:
        '200':
          description: New Patient is created
        '400':
          description: Bad request
        '404':
          description: Patient with the id not found
    delete:
      tags:
        - Patients
      summary: Delete a Patient
      produces:
        - application/xml
        - application/json
      parameters:
        - name: id
          in: path
          description: Patient id to delete
          required: true
          type: string
      responses:
        '200':
          description: OK
  /prescriptions/{doctorId}/{patientId}:
    get:
      tags:
        - Prescriptions
      summary: get all prescriptions
      produces:
        - application/json
      parameters:
        - name: doctorId
          in: path
          description: id to find the doctor
          required: true
          type: string
        - name: patientId
          in: path
          description: id to find the patient
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: 'Patient/Doctor with the id not found'
    post:
      tags:
        - Prescriptions
      summary: create a prescriptions
      produces:
        - application/json
      parameters:
        - name: doctorId
          in: path
          description: id to find the doctor
          required: true
          type: string
        - name: patientId
          in: path
          description: id to find the patient
          required: true
          type: string
        - name: Prescription
          in: body
          description: prescription body
          schema:
            $ref: '#/definitions/Prescription'
      responses:
        '200':
          description: OK
        '404':
          description: 'Patient/Doctor with the id not found'
  /users:
    get:
      tags:
      - Users
      summary: Get all users in system
      produces:
      - application/json
      responses:
        '200':
        description: OK
        schema:
          $ref: '#/definitions/User'
    post:
      tags:
      - Users
      description: Create new user in system
      parameters:
      - name: Users
        in: body
        description: User that we want to create
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        '200':
          description: New User is created
          schema:
            $ref: '#/definitions/User'

  /users/{id}:
    get:
      tags:
        - Users
      summary: get a user
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id to find the user
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: 'Doctor with the id not found'
    put:
      tags:
        - Users
      description: Update a user in system
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
        - in: body
          name: User
          description: User that we want to update
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: New Patient is created
        '400':
          description: Bad request
        '404':
          description: Patient with the id not found
    delete:
      tags:
        - Users
      summary: Delete a user
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
      responses:
        '200':
          description: OK
  /users/search:
    get:
      tags:
        - Users
      summary: get a user
      produces:
        - application/json
      parameters:
        - name: email
          in: query
          description: id to find the user
          required: true
          type: string
      responses:
        '200':
          description: OK
        '404':
          description: 'Doctor with the id not found'
definitions:
  Doctor:
    required:
      - _id
      - name
      - address
      - age
      - phone
    properties:
      _id:
        type: string
      name:
        type: string
      address:
        type: string
      age:
        type: number
      phone:
        type: string
  
  Patient:
    required:
      - _id
      - name
      - age
      - phone
      - address
    properties:
      _id:
        type: string
      name:
        type: string
      address:
        type: string
      age:
        type: number
      phone:
        type: string
      
  Prescription:
    properties:
      disease:
        type: array
        items:
          type: string
      medicine:
        type: array
        items:
          type: string
  User:
    properties:
      required:
        - email
        - password
        - scope
      email:
        type: string
      password:
        type: string
      scope:
        type: array
        items:
          type: string